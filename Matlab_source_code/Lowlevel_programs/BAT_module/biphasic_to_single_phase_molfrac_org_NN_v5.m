function [y1] = biphasic_to_single_phase_molfrac_org_NN_v5(x1)
%NN_HIGHERORGMOLEF_GAP_LAYERS24 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Oct-2018 15:02:58.
% 
% [y1] = NN_HigherOrgmolef_Gap_layers24(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0.03];
x1_step1.gain = [4.85105461413554;6.06060606060606];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.8514275487869635839;5.7010903702309043695;-4.223155231828595646;3.8774900021515046333;-1.325265064433274409;1.7576973644493769644;-0.88991761674608715893;3.1279829884292338349;0.78794652837451617522;0.43896968097298133538;0.57708117017809135163;-3.0787608017900915947;-0.40581098864752368494;0.64373309554603275195;1.7016326841051676588;1.4946559455903600799;-1.9151891347855638514;-0.36222536287456474913;1.7997779117047685293;2.1894391519933469326;-4.8365290076330538227;-4.2267640672562194482;11.037306029484762249;-12.465284279233749487];
IW1_1 = [-2.9652369062270196309 3.5456936036245476629;-5.3003896191163066831 1.6107048934053527223;1.4490960942847532777 -4.4905963483778252865;-5.3604492963083165691 -1.9038162660993562803;3.5615591287827941258 -0.9760690759109916792;-7.4323704665484466858 3.9952918221278448385;5.2436980487815443297 0.26336330948747371794;-9.7224092904321945952 -3.3963153832437282809;-6.5939564893121698219 -0.86743278765059372848;-3.9566478027540843421 6.2043545317513464354;-2.6933489710522580118 -5.3296776285599456457;15.078615754750318345 7.5357195857930081573;8.5837138409899615965 2.1781365767882316931;4.2753681534309269097 -1.2376866082237749644;-4.3694881192877721432 -4.1504032312908245572;-5.1076333577305517153 -4.2573773952093914019;3.9331831538436010653 4.2383815452477779928;-3.3051366335726815038 -2.1527745655619221488;5.5102707313508449971 0.6090289580711970574;4.0590106228932549826 -1.4537733443192657479;1.1330332610381823599 7.987215295423046868;-1.4690914445681406697 3.46783846307828858;1.7834488065629925391 8.9409991055225059853;-2.3985373019045113097 -10.018658523996098353];

% Layer 2
b2 = -0.23364831139900205104;
LW2_1 = [0.61668049433913207924 -0.3593912575055407399 -0.3266392699738256411 -1.6045946666158248384 -1.1739361061623092564 0.087334561642434180295 2.9371817317733741604 -0.38368295323950185605 2.3343874738168426397 0.031130301801809163315 -0.055017015768111438012 -0.2379118380584248349 0.51580586145584794711 -0.35767521938020213623 -7.6921394249634440499 3.3355022461024885772 -4.3095896749403888037 0.29571381132244778378 0.30910107924737867391 -0.25489989065848722705 0.080905914998754310807 -0.17070806216025710689 4.7037417262526615147 3.0438085224819206864];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.02204023860075;
y1_step1.xoffset = 0.0109;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
