function [y1] = inverted_NNMcGlashan_biphasic_aqPhase_KGv4(x1)
%NN_BIPHASICWATERRICH_LAYERS20 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Oct-2018 20:34:46.
% % Updated by Kyle Gorkowski [LAPTOP-A4QKFAC8] on 2018-Oct-26  3:38 PM

% [y1] = NN_biphasicWaterRich_layers20(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.000400102681415014;0.00088801060486078;0.00557436720895946];
x1_step1.gain = [4.68765998333477;9.37266431266235;2.0112113430358];
x1_step1.ymin = -1;

% Layer 1
b1 = [-15.754111153709159154;1.1421530809730504608;-29.909891081252979461;-20.020189917557427606;0.30527710032897148462;0.10705888523410117541;-1.6970231889934030978;-22.505988422651963532;0.55576478180906285775;3.4517184118637129764;-1.0491391737925768179;-20.468849722892290544;2.4753843038839637991;19.874605455543086663;-29.477232172692346523;-3.5678394424618833369;7.4061000150523712549;31.233755257608624589;2.5928642966508510526;5.8727256286337228275];
IW1_1 = [11.745762315289834277 -14.83305626778879649 4.627661084386562429;0.1290123063101609735 1.1910131847705442976 0.41257810977712089384;1.6837818251245897372 2.980569512353168804 31.097020768137298319;-21.998203812544655733 -17.381901136808586728 -0.28216737377342682169;-1.4489171112166361333 -3.1079715856153597997 2.2579531066299685094;-1.4397720028525251568 -3.0909162072952161004 2.4507118409790757951;-0.14730395232832038666 -1.0865244248593586285 0.082720572787994495201;1.7119039270218900928 -30.500095817734301562 2.1643317407088913384;-0.012187085755008294011 -0.023869327865239854669 0.32126712449332511801;-0.78711765334741634614 0.50051242174061527646 1.6504955243887318161;-1.0964214601944557437 0.33593824811440847755 -0.98541348206292800338;-20.40036767817019836 -16.370360628620481691 1.6517467051194418826;2.7658437760765806068 -0.58345621506893130537 -0.5710013046771751366;-1.6898535653109760801 30.323089788480579898 0.35324360164652263139;1.7447945126478165978 3.0495379048131594502 30.684709221158875891;-0.34058463101298475095 11.046515691478733245 -11.763999255590205095;4.93771649468178353 3.8873580467542154793 -2.2969705581643702352;11.057276723503406402 28.464305030184252843 -1.275202135060730102;2.7973166615868452212 -0.58724547950584782274 -0.67647061891505089193;-0.082141955808786151771 -1.9239927173214781408 2.5104649684488404837];

% Layer 2
b2 = -4.4421705493105267948;
LW2_1 = [0.032729464218749504401 7.4647781683217191429 -4.7760069566541023534 0.39182182967017470387 14.306127230569620323 -14.323541703400319847 9.2290888013324519079 -10.315099305913195238 -19.015523439630083402 28.940940139744256498 -1.0636823549577674175 -0.36525568875496144949 -9.0898487820640738732 -10.361904662294008972 4.5902922024669612355 6.1386955996136132185 0.11218184380217820217 -0.037737779478331283378 8.8632686411203902566 -4.9131693483826683888];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 9.75610026802322;
y1_step1.xoffset = 5.68818221852174e-08;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
