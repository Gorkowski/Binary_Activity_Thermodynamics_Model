function [mole_frac_org_alpha, mole_frac_org_beta] = inverted_NNMcGlashan_v8(O2C, H2C, Mratio, a_w, BAT_functional_group)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Apr-2018 13:11:25.
%% Updated by Kyle Gorkowski [LAPTOP-A4QKFAC8] on 2018-Oct-26  3:38 PM

% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

%setup inputs
    [O2C,Mratio] = convert_chemical_structure_to_OH_eqv_v3(O2C,Mratio, BAT_functional_group );


mole_frac_org_alpha=Mratio.*0;
mole_frac_org_beta=Mratio.*0;


for i=1:length(Mratio)
    O2C_single_phase_cross_point=single_phase_O2C_point_KGv3(Mratio(i,1));
    
    x1=[O2C(i,1), Mratio(i,1), a_w(i,1)];
    [transfer,weight_lower,weight_higher] = invert_NN_85to90_transfer_weights( a_w(i,1));
    
    if O2C(i,1)<O2C_single_phase_cross_point % biphasic
        
        %maybe update with v4
        [RH_cross_point] = biphasic_to_single_phase_RH_master_v4(O2C(i,1), H2C(i,1), Mratio(i,1), BAT_functional_group);
        
        
        if weight_lower==1
            [mole_frac_org_beta(i,1)] = inverted_NNMcGlashan_biphasic_orgPhase_KGv4(x1')'; % org phase
        elseif weight_higher==1
            [mole_frac_org_beta(i,1)] = inverted_NNMcGlashan_biphasic_orgPhase85to1_KGv4(x1')'; % org phase
        elseif transfer==1
            mole_frac_org_beta(i,1)=weight_lower.*inverted_NNMcGlashan_biphasic_orgPhase_KGv4(x1')'+weight_higher.*inverted_NNMcGlashan_biphasic_orgPhase85to1_KGv4(x1')';
        else
            error('invert error')
        end
        
        if a_w(i,1)>RH_cross_point   %last_RH_cross_point
            x_alpha=x1;
        else
            x_alpha=[O2C(i,1), Mratio(i,1), RH_cross_point];
            %             [mole_frac_org_alpha(i,1)] = inverted_NNMcGlashan_biphasic_aqPhase_KGv4(x_alpha')'; % below in 2 phase
        end
        
        if weight_lower==1
            [mole_frac_org_alpha(i,1)] = inverted_NNMcGlashan_biphasic_aqPhase_KGv4(x_alpha')'; % org phase
        elseif weight_higher==1
            [mole_frac_org_alpha(i,1)] = inverted_NNMcGlashan_biphasic_aqPhase85to1_KGv4(x_alpha')'; % org phase
        elseif transfer==1
            mole_frac_org_alpha(i,1)=weight_lower.*inverted_NNMcGlashan_biphasic_aqPhase_KGv4(x_alpha')'+weight_higher.*inverted_NNMcGlashan_biphasic_aqPhase85to1_KGv4(x_alpha')';
        else
            error('invert error')
        end
        
    else % single phase
        
        
        
        if weight_lower==1
            [mole_frac_org_alpha(i,1)] = inverted_NNMcGlashan_singlephase_only_KGv4(x1')'; % org phase
        elseif weight_higher==1
            [mole_frac_org_alpha(i,1)] = inverted_NNMcGlashan_singlephase_only85to1_KGv4(x1')'; % org phase
        elseif transfer==1
            mole_frac_org_alpha(i,1)=weight_lower.*inverted_NNMcGlashan_singlephase_only_KGv4(x1')'+weight_higher.*inverted_NNMcGlashan_singlephase_only85to1_KGv4(x1')';
        else
            error('invert error')
        end
        
        mole_frac_org_beta(i,1)=mole_frac_org_alpha(i,1);
        
    end
end

%round to zero alpha
lower_round=mole_frac_org_alpha>0;
mole_frac_org_alpha=mole_frac_org_alpha.*lower_round+not(lower_round).*10^-8;
% round max to 1
upper_round=mole_frac_org_alpha>1;
mole_frac_org_alpha=not(upper_round).*mole_frac_org_alpha+upper_round;

%round to zero
lower_round=mole_frac_org_beta>0;
mole_frac_org_beta=mole_frac_org_beta.*lower_round+not(lower_round).*10^-8;
% round max to 1
upper_round=mole_frac_org_beta>1;
mole_frac_org_beta=not(upper_round).*mole_frac_org_beta+upper_round;

end
