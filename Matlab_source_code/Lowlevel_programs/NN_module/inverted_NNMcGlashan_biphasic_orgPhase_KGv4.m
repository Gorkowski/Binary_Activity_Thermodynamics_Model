function [y1] = inverted_NNMcGlashan_biphasic_orgPhase_KGv4(x1)
%NN_BIPHASICORGRICH_LAYERS20 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Oct-2018 19:02:45.
% % Updated by Kyle Gorkowski [LAPTOP-A4QKFAC8] on 2018-Oct-26  3:38 PM

% [y1] = NN_biphasicOrgRich_layers20(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.000400102681415014;0.00088801060486078;0];
x1_step1.gain = [4.68765998333477;9.37266431266235;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4276229442289727345;-5.319020866747196763;5.3347005060498373652;-4.3823329258022427624;9.3432053482407333433;0.89491724863347588137;8.6706343347349594808;1.2787604364188125405;-0.81624590271013075515;0.84897619618621422699;0.86513497671518557741;3.3500724627865672289;-0.89351819650526465022;-2.550177316580727549;-3.4003693503650467278;5.1681997721461927497;0.33519009772474978037;-10.203940845664231318;-0.33306153330449278505;-5.558003778499297276];
IW1_1 = [1.2020965931368976509 -6.0211216799785187703 0.16322278541908838423;0.26030708858689460827 -5.26890543741868278 0.2486883339127683723;-0.81352805526280125292 4.7265674634707757207 -2.421901341473354119;1.1383489547017400234 -6.0013593679410410786 0.18653108226635939371;0.45368650934377768857 8.2047379268629665461 3.0518310918254170083;-0.34386929835997942506 1.0151241714409804384 0.92001802286664657871;0.30780637594115084488 7.8974850605066571063 2.5112787095173163543;-2.4329110729101022237 -1.5969223109131511773 -0.37639374557405874677;0.60046248146745584418 0.35283585728697280937 0.40062728184432294665;-0.30392545956457955869 0.87145501925958590572 0.77745160458633277845;-0.70384310238657266101 -0.12797798682207903176 -0.32624435489556152801;-0.085636365383155929609 3.9566319938144616231 -0.092729267919563707068;0.15353517160269528063 0.47526468598081789141 0.3993660115840196867;-2.9780357841445290745 0.080896254580117912814 0.08262169392657046918;0.091179662648170040073 -4.319630061129076104 0.099504297218647203005;-0.78450299254774680247 4.8329729982727451798 -2.0835509292204958953;0.71146852677636918116 0.068829789496649931846 0.15233731474289377572;-0.60076525168293093415 -8.6758288295795686906 -3.646569480768952598;-0.50684178392056344897 -0.1248103901685794076 -0.16973417347709765512;0.83575889437468886545 -4.7121830911224398264 2.7590354538889290126];

% Layer 2
b2 = -5.26406734696785783;
LW2_1 = [4.6643354734000608275 3.5774751815161662805 -13.861552083086419174 -4.897938580544403564 11.85090257340637443 4.5003979345529234735 -7.6869715876171298419 0.2472548819601622927 17.04309413761733083 -7.0831544884315835731 15.03968394740360992 11.049877941989427299 -10.273080272938317492 0.47493189202545277317 7.6717582624562190574 6.9936693684074597854 -15.362529089112630487 4.7694317941101234126 -21.755586986348948386 -6.7984233828639331065];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.00849038412914;
y1_step1.xoffset = 0.00422724659088725;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
